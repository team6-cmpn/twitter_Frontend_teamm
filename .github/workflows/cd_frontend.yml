name: CI/CD Frontend

on:
  push:
    branches: [ main ]
env:
    DOCKER_USER: pierrebassily
    DOCKER_PASSWORD: gradepero100
    REPO_NAME: code
jobs:
# First we will see the application build or not , then we will deploy in EC2
  # build:
    
  #   runs-on: ubuntu-latest  # runner name : (ubuntu latest version) 
  #   steps:
     
  #   - uses: actions/checkout@v2 # first action : checkout source code
  #   - name: docker login
  #     run: | # log into docker hub account
  #       docker login -u $DOCKER_USER -p $DOCKER_PASSWORD  
  #   - name: Get current date # get the date of the build
  #     id: date
  #     run: echo "::set-output name=date::$(date +'%Y-%m-%d--%M-%S')"
  #   - name: Build the Docker image # push The image to the docker hub
  #     run: docker build . --file Dockerfile --tag pierrebassily/code:frontendlatest
  #   - name: Docker Pushsed
  #     run: docker push pierrebassily/code:frontendlatest

  Testing:
    name: "Run Tests on code"
    # The Runner would run on the latest version of ubuntu server
    runs-on: ubuntu-latest
    
    steps:
      # Task[1]: Get Clone Key on the Runner
      - uses: actions/checkout@v2
      # Task[2]: create bach scripts to ease Setting the Enviroment
      - name: Creat SetEnviroment.sh scripts
        run: |
          cat >>~/SetEnviroment.sh<<END
          #!/bin/bash
          sudo apt install python3 
          python3 ––version
          sudo apt install python3-pip
          pip --version
          sudo pip install -r ~/testing/requirements.txt
          whereis chromedriver
          END
          chmod +x ~/SetEnviroment.sh
      
      # Task[3]: Run SetEnviroment script
      - name: Run SetEnviroment.sh scripts
        run: ~/SetEnviroment.sh

      # Task[4]: create bach scripts to ease Testing
      - name: Creat Testing.sh scripts
        run: |
          cat >>~/Testing.sh<<END
          #!/bin/bash
          python3 ~/testing/main.py 
          END
          chmod +x ~/Testing.sh
      
      # Task[5]: Run testing scripts Scripts
      - name: Run Testing.sh scripts
        run: ~/Testing.sh

  # Deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - uses: actions/checkout@v2 

  #     - name: Creat SSh Config file
  #       run: |
  #         mkdir -p ~/.ssh/
  #         echo "$SSH_KEY" > ~/.ssh/staging.key
  #         chmod 600 ~/.ssh/staging.key
  #         cat >>~/.ssh/config <<END
  #         UserKnownHostsFile ~/.ssh/known_hosts
  #         Host staging
  #           HostName $SSH_HOST
  #           User $SSH_USER
  #           IdentityFile ~/.ssh/staging.key
  #           StrictHostKeyChecking no
  #         END
  #       env:
  #         SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  #         SSH_HOST: ${{ secrets.EC2_PUBLIC_IP }}
  #         SSH_USER: ${{ secrets.EC2_USERNAME }}

  #     - name: Deploy in EC2
  #       run: |
  #             cat >>~/Fetch.sh<<EOF
  #             cd /home/ubuntu/twitter/test
  #             sudo docker-compose down  
  #             sudo docker pull pierrebassily/code:frontendlatest
  #             sudo docker-compose up -d --build  
  #             EOF
  #     - name: Deploy in EC2
  #       run: cat ~/Fetch.sh | ssh staging

 
